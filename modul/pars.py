from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
from aiogram.dispatcher import FSMContext
from aiogram import Dispatcher, types

from os import path
import asyncio
import re

from modul.TelModul.PyClass import PyClass
from modul.file_handling import FlowData
from modul.func import authorization

constExit = False
flow: FlowData

class ParsClass(StatesGroup):
    waiting_for_pars_command = State() # pars_command
    waiting_for_pars_action = State() # pars_action_pars, pars_action_button
    waiting_for_pars_limit = State() # pars_limit

async def pars_info(message: types.Message):
    global flow
    flow = FlowData()
    if not authorization(message.from_user.id):
        await message.answer("–í–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–∞—Ö " + str(message.from_user.id))
        return

    await message.answer("–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /close")
    invite_kb = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton(text="–ü–∞—Ä—Å –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data="btn_pars_all"),
        InlineKeyboardButton(text="–ü–∞—Ä—Å –¥–ª—è –æ–ø—Ä–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞", callback_data="btn_pars_phone"),
        InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∏–º—è –≥—Ä—É–ø–ø—ã –≤ —Å–ø–∏—Å–æ–∫ üíæ", callback_data="btn_write_save"),
        InlineKeyboardButton(text="–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø üìÑ", callback_data="btn_print"),
        InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø—É ‚ùåüìÑ", callback_data="btn_dell"),
        InlineKeyboardButton(text="–ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ üïì", callback_data="btn_regl")
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∏–Ω–≤–∞–π—Ç–∞:", reply_markup=invite_kb)
    await ParsClass.waiting_for_pars_command.set()

async def pars_command(call: types.CallbackQuery, state: FSMContext):
    global flow
    group = flow.group_read()
    accounts = flow.read_account()
    pars_kb = None
    selt = call.data
    text = ""
    if selt == "btn_pars_all" or selt == "btn_write_save":
        text = "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≥—Ä—É–ø–ø—ã (@_–Ω–∞–∑–≤–∞–Ω–∏–µ_–≥—Ä—É–ø–ø—ã):"
    elif selt == "btn_print":
        text = "–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø:"
        for i in range(0, len(group)):
            text += f'\n[{i}] @' + group[i]
        await call.message.answer(text)
        await state.finish()
        return
    elif selt == "btn_pars_phone":
        pars_kb = pars_kb = InlineKeyboardMarkup(row_width=2)
        text = "–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –ø–∞—Ä—Å–∞:"
        for acc in accounts:
            pars_kb.add(InlineKeyboardButton( text='+' + acc['phone'], callback_data="btn_" + acc['phone'] ))
    elif selt == "btn_dell":
        pars_kb = pars_kb = InlineKeyboardMarkup(row_width=2)
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞:"
        for gr in range(0, len(group)):
            pars_kb.add(InlineKeyboardButton( text='@'+group[gr], callback_data="btn_"+str(gr) ))
    elif selt == "btn_regl":
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        pars_kb = InlineKeyboardMarkup(row_width=2).add(
            InlineKeyboardButton(text="–ó–∞–ø—É—Å—Ç–∏—Ç—å üöÄ", callback_data="start"),
            InlineKeyboardButton(text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚õî", callback_data="stop")
        )
    await call.message.answer(text, reply_markup=pars_kb)
    await state.update_data(select=selt, group=group)
    await ParsClass.next()

async def pars_action(message: types.Message, state: FSMContext):
    global flow
    selt = await state.get_data()
    name = re.sub('@', '', message.text)
    await state.update_data(name=name)
    
    if selt["select"] == "btn_write_save":
        if len(name) > 0:
            flow.group_write(group=[name])
            await message.answer(f"@{name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫")
        else:
            await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã!")
            return
        await state.finish()
    elif selt["select"] == "btn_pars_all":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        await ParsClass.next()

async def pars_action_button(call: types.CallbackQuery, state: FSMContext):
    selt = await state.get_data()

    if selt['select'] == "btn_pars_phone":
        try:
            phone = call.data.split("_")[1]
            if len(phone) < 7:
                raise IndexError
        except IndexError:
            await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –µ—â–µ —Ä–∞–∑!")
            return
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≥—Ä—É–ø–ø—ã –∏ –ª–∏–º–∏—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (@–∏–º—è_–≥—Ä—É–ø–ø—ã 100)")
        await state.update_data(phone_pars=phone)
        await ParsClass.next()
        return
    if selt['select'] == "btn_regl":
        if call.data == "start":
            await state.finish()
            await call.message.answer("–ó–∞–ø—É—Å–∫ –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ–≥–æ: " + str(constExit))
            status = await pars_while_start(call)
            if status:
                await call.message.answer("–ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
            elif status == "None proxy":
                await call.message.answer("–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏!")
            return
        elif call.data == "stop":
            await call.message.answer("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ–≥–æ –ø—Ä–∞—Å–∏–Ω–≥–∞: " + str(constExit))
            await pars_while_stop()
    elif selt['select'] == "btn_dell":
        global flow
        try:
            index = int(call.data[4:])
            group = selt['group']
            name = group[index]
            group.pop(index)
            flow.group_write(group=group, mod="w")
            await call.message.answer(f"–ì—Ä—É–ø–ø–∞ @{name} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞!")
        except ValueError:
            await call.message.answer("–û—à–∏–±–∫–∞! –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞!")
            return
        except IndexError:
            await call.message.answer("–ù–µ—Ç –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –≤ —Å–ø–∏—Å–∫–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∑–∞–Ω–æ–≤–æ!")
    await state.finish()

async def pars_limit(message: types.Message, state: FSMContext):
    global flow
    data = await state.get_data()
    phone = data.get("phone_pars", None)
    mess_data = message.text.split(" ")
    print(mess_data)
    try:
        if len(mess_data) == 2:
            name = re.sub('@', '', mess_data[0])
            limit = int(mess_data[1])
        else:
            name = data["name"]
            if message.text == "":
                raise ValueError
            limit = int(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏–º–∏—Ç!")
        return
    except KeyError as e:
        print(e.args[0] == 'name')
        if e.args[0] == 'name':
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
            return
        raise KeyError(e)
    proxy = flow.proxy_read()
    if len(proxy) == 0:
        await message.answer("–ù–µ—Ç –ø—Ä–æ–∫—Å–∏!")
        await state.finish()
        return
    
    await message.answer(
        f"–ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ ({limit} –ø–æ–ª—å–∑.). –ï—Å–ª–∏ –±–æ–ª—å—à–æ–µ –∫–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏...", "")
    parsMess = await message.answer(f"–¢–µ–ª–µ—Ñ–æ–Ω: load, [0/load]\n–°–ø–∞—Ä—Å–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: [0/{limit}]")
    py = PyClass(path.split(path.split(__file__)[0])[0], proxy)
    error = await py.pars(parsMess, name, limit, phone_sel=phone)
    try:
        pass
    except Exception as e:
        await message.answer("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞!")
        # logger.error('[Err]', e)
        print('[Err Pars]', e, type(e))
        await message.answer('[Err]' + str(e))
        await state.finish()
        return
    if len(error) == 1 and error[0] == "NO_PROXY":
        await message.answer("–ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏!")
    for err in error:
        if err[1] == "NO_PROXY_ACCOUNT":
                await message.answer(f"–î–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ +{err[0]} –Ω–µ—Ç –ø—Ä–æ–∫—Å–∏!")
        elif err[1] == "ERROR_CONNECT_PROXY":
            await message.answer(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏ {err[2]} –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ +{err[0]}")
        elif err[1] == "NOT_AUTHORIZED":
            await message.answer(f"–ê–∫–∫–∞—É–Ω—Ç +{err[0]} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        elif err[1] == "NO_CHAT_":
            await message.answer(f"–î–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ +{err[0]} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É {err[2]}!")
    await message.answer("–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
    await state.finish()

async def pars_while_start(call: types.CallbackQuery):
    from datetime import datetime, time

    global flow
    global constExit
    gvtime = time(00, 30)
    gvmin = gvtime.hour * 60 + gvtime.minute
    if constExit:
        return True
    constExit = True
    proxy = flow.proxy_read()
    if len(proxy) == '0':
        return "None proxy"
    py = PyClass(path.split(path.split(__file__)[0])[0], proxy)
    while constExit:
        totime = datetime.today().time()
        tomin = totime.hour * 60 + totime.minute
        print("–ü—Ä–æ–≤–µ—Ä–∫–∞", totime)
        if abs(tomin - gvmin) > 31:
            await asyncio.sleep(1800)
            continue
        # await call.message.answer("–ó–∞–ø—É—Å–∫–∞—é –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø...")
        print("Pars")
        group = flow.group_read()
        if len(group) == 0:
            await call.message.answer("[–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ] –£ –≤–∞—Å –Ω–µ—Ç –≥—Ä—É–ø–ø –≤ —Å–ø–∏—Å–∫–µ.")
        for chat in group:
            try:
                await py.pars(None, chat, 200)
            except Exception as e:
                await call.message.answer(f"–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–µ –≥—Ä—É–ø–ø—ã {chat}!")
                await call.message.answer(f"–ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
                # logger.error('[Err]', e)
                print('[Err]', e)
                await call.message.answer('[Err]' + str(e))
                constExit = False
                break
            """
            if check == "CHAT_ADMIN_REQUIRED":
                await call.message.answer("–ú–µ—Ç–æ–¥ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–∞—Ç–∞")
            elif check == "None proxy":
                await call.message.answer("–ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏!")
            elif check == "Add group":
                await call.message.answer(f"–î–æ–±–∞–≤—Ç–µ –≥—Ä—É–ø–ø—É {chat} –≤ –∞–∫–∫–∞—É–Ω—Ç–µ!")
            else:
                await call.message.answer(f"–ü–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –≥—Ä—É–ø–ø –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ. –í—Å–µ–≥–æ —Å–ø–∞—Ä—Å–µ–Ω–æ {check} –ø–æ–ª—å.")
            if len(error) > 0:
                text = "[–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ] –î–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Å–µ—Å—Å–∏–π –Ω–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:"
                for err in error:
                    text += "\n> " + err
                await call.message.answer(text)
            """
            await asyncio.sleep(60)

async def pars_while_stop():
    global constExit
    constExit = False