from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
from aiogram.dispatcher import FSMContext
from aiogram import Dispatcher, types

import re

from modul.file_handling import FlowData
from modul.func import authorization

flow: FlowData

class ProxyClass(StatesGroup):
    waiting_for_proxy_select = State() # proxy_select
    waiting_for_proxy_fin = State() # proxy_add or proxy_select

async def proxy_info(message: types.Message):
    global flow
    flow = FlowData()
    if not authorization(message.from_user.id):
        await message.answer("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
        return
    await message.answer("–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /close")

    invite_kb = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏ ‚úè", callback_data="btn_add"),
        InlineKeyboardButton(text="–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ üìÑ", callback_data="btn_list"),
        InlineKeyboardButton(text="–ù–∞–∑–Ω–∞—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º (–∞–≤—Ç–æ–º–∞—Ç–∏—á—Å–µ–∫–∏)", callback_data="btn_appoint"),
        InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å üìÑ", callback_data="btn_dell")
    )
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ —Å –ø—Ä–æ–∫—Å–∏", reply_markup=invite_kb)
    await ProxyClass.waiting_for_proxy_select.set()

async def proxy_select(call: types.CallbackQuery, state: FSMContext):
    global flow
    try:
        proxy = flow.proxy_read()
    except IndexError:
        proxy = []
    invite_kb = None
    text = "–ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ"
    lmbd = lambda x: "–°–≤–æ–±–æ–¥–µ–Ω" if x == '0' else "–ó–∞–Ω—è—Ç: " + x

    if call.data == "btn_add":
        text = "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ –≤ –≤–∏–¥–µ ¬´ip:port:user:password¬ª:"
    elif call.data == "btn_dell":
        invite_kb = InlineKeyboardMarkup(row_width=1)
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
        for i in range(0, len(proxy)):
            invite_kb.add(
                InlineKeyboardButton(text=f"[{lmbd(proxy[i]['id'])}] {proxy[i]['ip']}:{proxy[i]['port']}", callback_data="btnS_"+str(i))
            )
    elif call.data == "btn_list":
        text = "–°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏"
        for p in proxy:
            text += f"\n[{lmbd(p['id'])}] {p['ip']}:{p['port']}"
    elif call.data == "btn_appoint":
        account = flow.read_account()
        proxyAcc = []
        appoint = 0
        start = 0
        for p in proxy:
            if p["id"] != '0':
                proxyAcc.append(p["id"])
        for acc in account:
            if acc["phone"] in proxyAcc:
                appoint += 1
                continue
            for i in range(start, len(proxy)):
                if proxy[i]["id"] == '0':
                    proxy[i]["id"] = acc["phone"]
                    start = i + 1
                    appoint += 1
                    break
            if start >= len(proxy):
                break
        flow.proxy_write(proxy)
        text = f"–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\n> –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(account)} —à—Ç.\n> –î–ª—è {appoint} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –µ—Å—Ç—å –ø—Ä–æ–∫—Å–∏."
        if len(account) - appoint > 0:
            text += f"\n–î–ª—è {len(account) - appoint} –∞–∫–∫–æ—É–Ω—Ç–æ–≤ –Ω–µ—Ç –ø—Ä–æ–∫—Å–∏"

    await call.message.answer(text, reply_markup=invite_kb)

    if len(proxy) == 0 and call.data != "btn_add":
        await call.message.answer("–ù–µ—Ç –ø—Ä–æ–∫—Å–∏ –≤ —Å–ø–∏—Å–∫–µ!")
        await state.finish()
    elif call.data == "btn_list" or call.data == "btn_appoint":
        await state.finish()
    else:
        await state.update_data(proxy=proxy)
        await ProxyClass.next()

async def proxy_add(message: types.Message, state: FSMContext):
    global flow
    proxyData = await state.get_data()
    proxyData = proxyData["proxy"]
    proxy = re.sub(" ", "", message.text).split(':')
    print(proxy)
    if len(proxy) != 4:
        await message.answer("–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –ø—Ä–æ–∫—Å–∏, —Å–≤–µ—Ä—å—Ç–µ—Å—å —Å —à–∞–±–ª–æ–Ω–æ–º ¬´ip:port:user:password¬ª –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ")
        return
    for i in range(0, len(proxyData)):
        if proxyData[i]['ip'] == proxy[0] and proxyData[i]['port'] == proxy[1]:
            proxyData.pop(i)
    try:
        proxyData.append({
                'id': "0",
                'ip': proxy[0], 
                'port': int(proxy[1]),
                'user': proxy[2],
                'pass': proxy[3]
            })
    except ValueError:
        await message.answer("–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –ø—Ä–æ–∫—Å–∏!")
        return
    flow.proxy_write(proxyData)
    await message.answer(f"–ù–æ–≤—ã–π ¬´{proxy[0]}:{proxy[1]}¬ª –ø—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    await state.finish()

async def proxy_list(call: types.CallbackQuery, state: FSMContext):
    global flow
    btn = call.data.split('_')
    if btn[0] != "btnS":
        await call.message.answer("–ù–µ —Ç–∞ –∫–æ–º–∞–Ω–¥–∞!")
        return
    accounts = flow.read_account()
    proxyData = await state.get_data()
    proxyData = proxyData["proxy"]
    index = int(btn[1])
    proxyData.pop(index)
    flow.proxy_write(proxyData)

    await call.message.answer(f"–≠–ª–µ–º–µ–Ω—Ç ¬´{proxyData[index]['ip']}:{proxyData[index]['port']}¬ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")

    await state.finish()